"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

def find_divisors(number):
    divisors = set()
    
    from math import sqrt, floor
    
    search_limit = int(floor(sqrt(number)))
    
    for i in xrange(1, search_limit + 1, 1):
        if number % i is 0:
            # i is a divisor
            divisors.add(i)
            # and so is number // i
            quotient = number // i
            
            divisors.add(quotient)
            
    return divisors


def find_triangle_num_by_divisor(divisors_to_find):
    from maths.sequences import triangle_numbers
    
    for triangle_sum, iteration in triangle_numbers():
        divisors = find_divisors(triangle_sum)
        num_divisors = len(divisors)
        if num_divisors >= divisors_to_find:
            return num_divisors, divisors, iteration, triangle_sum

if __name__ == "__main__":
    num_divisors, divisors, triangle_number, triangle_number_value = find_triangle_num_by_divisor(500)
    print 'Triangle #%d with value %d had the following %d divisors: %s'%(triangle_number, triangle_number_value, num_divisors, divisors)